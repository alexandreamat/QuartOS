"""single inheritance accounts

Revision ID: fc4b92bac6db
Revises: ede8727d25bb
Create Date: 2024-02-11 23:12:31.052431

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "fc4b92bac6db"
down_revision: Union[str, None] = "ede8727d25bb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("account", sa.Column("type", sa.String(), nullable=True))
    op.add_column("account", sa.Column("plaid_id", sa.String(), nullable=True))
    op.add_column("account", sa.Column("plaid_metadata", sa.String(), nullable=True))
    op.add_column("account", sa.Column("mask", sa.String(), nullable=True))
    op.add_column(
        "account", sa.Column("userinstitutionlink_id", sa.Integer(), nullable=True)
    )
    op.add_column("account", sa.Column("user_id", sa.Integer(), nullable=True))
    op.create_unique_constraint(None, "account", ["plaid_id"])

    op.create_foreign_key(None, "account", "user", ["user_id"], ["id"])
    op.create_foreign_key(
        None, "account", "userinstitutionlink", ["userinstitutionlink_id"], ["id"]
    )

    institutionalaccount = sa.table(
        "institutionalaccount",
        sa.column("plaid_id", sa.String),
        sa.column("plaid_metadata", sa.String),
        sa.column("type", sa.String),
        sa.column("mask", sa.String),
        sa.column("userinstitutionlink_id", sa.Integer),
        sa.column("id", sa.Integer),
    )
    noninstitutionalaccount = sa.table(
        "noninstitutionalaccount",
        sa.column("type", sa.String),
        sa.column("user_id", sa.Integer),
        sa.column("id", sa.Integer),
    )
    account = sa.table(
        "account",
        sa.column("plaid_id", sa.String),
        sa.column("plaid_metadata", sa.String),
        sa.column("type", sa.String),
        sa.column("mask", sa.String),
        sa.column("userinstitutionlink_id", sa.Integer),
        sa.column("user_id", sa.Integer),
        sa.column("institutionalaccount_id", sa.Integer),
        sa.column("noninstitutionalaccount_id", sa.Integer),
    )

    op.execute(
        account.update()
        .values(
            plaid_id=institutionalaccount.c.plaid_id,
            plaid_metadata=institutionalaccount.c.plaid_metadata,
            type=sa.func.lower(institutionalaccount.c.type, type_=sa.String),
            mask=institutionalaccount.c.mask,
            userinstitutionlink_id=institutionalaccount.c.userinstitutionlink_id,
        )
        .where(account.c.institutionalaccount_id == institutionalaccount.c.id)
    )

    op.execute(
        account.update()
        .values(
            type=sa.func.lower(noninstitutionalaccount.c.type, type_=sa.String),
            user_id=noninstitutionalaccount.c.user_id,
        )
        .where(account.c.noninstitutionalaccount_id == noninstitutionalaccount.c.id)
    )

    op.alter_column("account", "type", nullable=False)

    op.drop_constraint(
        "account_institutionalaccount_id_fkey", "account", type_="foreignkey"
    )
    op.drop_constraint(
        "account_noninstitutionalaccount_id_fkey", "account", type_="foreignkey"
    )
    op.drop_column("account", "institutionalaccount_id")
    op.drop_column("account", "noninstitutionalaccount_id")

    op.drop_table("noninstitutionalaccount")
    op.drop_table("institutionalaccount")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "account",
        sa.Column(
            "noninstitutionalaccount_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "account",
        sa.Column(
            "institutionalaccount_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "account", type_="foreignkey")
    op.drop_constraint(None, "account", type_="foreignkey")
    op.create_foreign_key(
        "account_noninstitutionalaccount_id_fkey",
        "account",
        "noninstitutionalaccount",
        ["noninstitutionalaccount_id"],
        ["id"],
    )
    op.create_foreign_key(
        "account_institutionalaccount_id_fkey",
        "account",
        "institutionalaccount",
        ["institutionalaccount_id"],
        ["id"],
    )
    op.drop_constraint(None, "account", type_="unique")
    op.drop_column("account", "user_id")
    op.drop_column("account", "userinstitutionlink_id")
    op.drop_column("account", "mask")
    op.drop_column("account", "plaid_metadata")
    op.drop_column("account", "plaid_id")
    op.drop_column("account", "type")
    op.create_table(
        "institutionalaccount",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("plaid_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("plaid_metadata", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "type",
            postgresql.ENUM(
                "INVESTMENT",
                "CREDIT",
                "DEPOSITORY",
                "LOAN",
                "BROKERAGE",
                "OTHER",
                name="institutionalaccounttype",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("mask", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "userinstitutionlink_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["userinstitutionlink_id"],
            ["userinstitutionlink.id"],
            name="institutionalaccount_userinstitutionlink_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="institutionalaccount_pkey"),
        sa.UniqueConstraint("plaid_id", name="institutionalaccount_plaid_id_key"),
    )
    op.create_table(
        "noninstitutionalaccount",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "type",
            postgresql.ENUM(
                "PERSONAL_LEDGER",
                "CASH",
                "PROPERTY",
                name="noninstitutionalaccounttype",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="noninstitutionalaccount_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="noninstitutionalaccount_pkey"),
    )
    # ### end Alembic commands ###
